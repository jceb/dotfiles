# Configuration for Alacritty, the GPU enhanced terminal emulator.

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty itself.
#env:
  # TERM variable
  #
  # This value is used to set the `$TERM` environment variable for
  # each instance of Alacritty. If it is not present, alacritty will
  # check the local terminfo database and use `alacritty` if it is
  # available, otherwise `xterm-256color` is used.
  #TERM: xterm-256color

window:
  # Window dimensions (changes require restart)
  #
  # Specified in number of columns/lines, not pixels.
  # If both are `0`, this setting is ignored.
  dimensions:
    columns: 0
    lines: 0

  # Window position (changes require restart)
  #
  # Specified in number of pixels.
  # If the position is not set, the window manager will handle the placement.
  #position:
  #  x: 0
  #  y: 0

  # Window padding (changes require restart)
  #
  # Blank space added around the window in pixels. This padding is scaled
  # by DPI and the specified value is always added at both opposing sides.
  padding:
    x: 2
    y: 2

  # Spread additional padding evenly around the terminal content.
  #dynamic_padding: false

  # Window decorations
  #
  # Values for `decorations`:
  #     - full: Borders and title bar
  #     - none: Neither borders nor title bar
  #
  # Values for `decorations` (macOS only):
  #     - transparent: Title bar, transparent background and title bar buttons
  #     - buttonless: Title bar, transparent background, but no title bar buttons
  #decorations: full

  # Startup Mode (changes require restart)
  #
  # Values for `startup_mode`:
  #   - Windowed
  #   - Maximized
  #   - Fullscreen
  #
  # Values for `startup_mode` (macOS only):
  #   - SimpleFullscreen
  # startup_mode: Windowed

  # Window title
  #title: Alacritty

  # Window class (Linux/BSD only):
  #class:
    # Application instance name
    #instance: Alacritty
    # General application class
    #general: Alacritty

  # GTK theme variant (Linux/BSD only)
  #
  # Override the variant of the GTK theme. Commonly supported values are `dark` and `light`.
  # Set this to `None` to use the default theme variant.
  #gtk_theme_variant: None

#scrolling:
  # Maximum number of lines in the scrollback buffer.
  # Specifying '0' will disable scrolling.
  #history: 10000

  # Scrolling distance multiplier.
  #multiplier: 3

# Font configuration
font:
  # Normal (roman) font face
  normal:
    # Font family
    #
    # Default:
    #   - (macOS) Menlo
    #   - (Linux/BSD) monospace
    #   - (Windows) Consolas
    # family: JetBrains Mono
    family: JetBrainsMono Nerd Font

    # The `style` can be specified to pick a specific face.
    #style: Regular

  # Bold font face
  bold:
    # Font family
    #
    # If the bold family is not specified, it will fall back to the
    # value specified for the normal font.
    # family: JetBrains Mono
    family: JetBrainsMono Nerd Font

    # The `style` can be specified to pick a specific face.
    #style: Bold

  # Italic font face
  italic:
    # Font family
    #
    # If the italic family is not specified, it will fall back to the
    # value specified for the normal font.
    # family: JetBrains Mono
    family: JetBrainsMono Nerd Font

    # The `style` can be specified to pick a specific face.
    #style: Italic

  # Bold italic font face
  bold_italic:
    # Font family
    #
    # If the bold italic family is not specified, it will fall back to the
    # value specified for the normal font.
    # family: JetBrains Mono
    family: JetBrainsMono Nerd Font

    # The `style` can be specified to pick a specific face.
    #style: Bold Italic

  # Point size
  size: 9

  # Offset is the extra space around each character. `offset.y` can be thought of
  # as modifying the line spacing, and `offset.x` as modifying the letter spacing.
  #offset:
  #  x: 0
  #  y: 0

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increasing `x` moves the glyph to the right,
  # increasing `y` moves the glyph upward.
  #glyph_offset:
  #  x: 0
  #  y: 0

  # Thin stroke font rendering (macOS only)
  #
  # Thin strokes are suitable for retina displays, but for non-retina screens
  # it is recommended to set `use_thin_strokes` to `false`.
  #use_thin_strokes: true

# If `true`, bold text is drawn using the bright color variants.
draw_bold_text_with_bright_colors: true

schemes:
  papercolor: &papercolor # from https://github.com/eendroroy/alacritty-theme/blob/master/themes/papercolor_light.yaml
    # Default colors
    primary:
      background: '0xeeeeee'
      foreground: '0x878787'

    cursor:
      text: '0xeeeeee'
      cursor: '0x878787'

    # Normal colors
    normal:
      black:   '0xeeeeee'
      red:     '0xaf0000'
      green:   '0x008700'
      yellow:  '0x5f8700'
      blue:    '0x0087af'
      magenta: '0x878787'
      cyan:    '0x005f87'
      white:   '0x444444'

    # Bright colors
    bright:
      black:   '0xbcbcbc'
      red:     '0xd70000'
      green:   '0xd70087'
      yellow:  '0x8700af'
      blue:    '0xd75f00'
      magenta: '0xd75f00'
      cyan:    '0x005faf'
      white:   '0x005f87'

  nord: &nord # from https://github.com/arcticicestudio/nord-alacritty/blob/develop/src/nord.yml
    primary:
      background: '#2e3440'
      foreground: '#d8dee9'
      dim_foreground: '#a5abb6'
    cursor:
      text: '#2e3440'
      cursor: '#d8dee9'
    vi_mode_cursor:
      text: '#2e3440'
      cursor: '#d8dee9'
    selection:
      text: CellForeground
      background: '#4c566a'
    search:
      matches:
        foreground: CellBackground
        background: '#88c0d0'
      bar:
        background: '#434c5e'
        foreground: '#d8dee9'
    normal:
      black: '#3b4252'
      red: '#bf616a'
      green: '#a3be8c'
      yellow: '#ebcb8b'
      blue: '#81a1c1'
      magenta: '#b48ead'
      cyan: '#88c0d0'
      white: '#e5e9f0'
    bright:
      black: '#4c566a'
      red: '#bf616a'
      green: '#a3be8c'
      yellow: '#ebcb8b'
      blue: '#81a1c1'
      magenta: '#b48ead'
      cyan: '#8fbcbb'
      white: '#eceff4'
    dim:
      black: '#373e4d'
      red: '#94545d'
      green: '#809575'
      yellow: '#b29e75'
      blue: '#68809a'
      magenta: '#8c738c'
      cyan: '#6d96a5'
      white: '#aeb3bb'

# colors: *papercolor
colors: *nord

# Bell
#
# The bell is rung every time the BEL control character is received.
#bell:
  # Visual Bell Animation
  #
  # Animation effect for flashing the screen when the visual bell is rung.
  #
  # Values for `animation`:
  #   - Ease
  #   - EaseOut
  #   - EaseOutSine
  #   - EaseOutQuad
  #   - EaseOutCubic
  #   - EaseOutQuart
  #   - EaseOutQuint
  #   - EaseOutExpo
  #   - EaseOutCirc
  #   - Linear
  #animation: EaseOutExpo

  # Duration of the visual bell flash. A `duration` of `0` will disable the
  # visual bell animation.
  #duration: 0

  # Visual bell animation color.
  #color: '#ffffff'

  # Bell Command
  #
  # This program is executed whenever the bell is rung.
  #
  # When set to `command: None`, no command will be executed.
  #
  # Example:
  #   command:
  #     program: notify-send
  #     args: ["Hello, World!"]
  #
  #command: None

# Background opacity
#
# Window opacity as a floating point number from `0.0` to `1.0`.
# The value `0.0` is completely transparent and `1.0` is opaque.
background_opacity: 1.0

selection:
  semantic_escape_chars: ",│`|:\"' ()[]{}<>\t┤├┬┴`„“«»&*;=?@^#:."

  # When set to `true`, selected text will be copied to the primary clipboard.
  save_to_clipboard: false

# Allow terminal applications to change Alacritty's window title.
#dynamic_title: true

# cursor:
  # Cursor style
  #
  # Values for `style`:
  #   - ▇ Block
  #   - _ Underline
  #   - | Beam
  #style: Block

  # Vi mode cursor style
  #
  # If the vi mode cursor style is `None` or not specified, it will fall back to
  # the style of the active value of the normal cursor.
  #
  # See `cursor.style` for available options.
  #vi_mode_style: None

  # If this is `true`, the cursor will be rendered as a hollow box when the
  # window is not focused.
  #unfocused_hollow: true

  # Thickness of the cursor relative to the cell width as floating point number
  # from `0.0` to `1.0`.
  #thickness: 0.15

# Live config reload (changes require restart)
#live_config_reload: true

# Shell
#
# You can set `shell.program` to the path of your favorite shell, e.g. `/bin/fish`.
# Entries in `shell.args` are passed unmodified as arguments to the shell.
#
# Default:
#   - (macOS) /bin/bash --login
#   - (Linux/BSD) user login shell
#   - (Windows) powershell
#shell:
#  program: /bin/bash
#  args:
#    - --login

# Startup directory
#
# Directory the shell is started in. If this is unset, or `None`, the working
# directory of the parent process will be used.
#working_directory: None

# WinPTY backend (Windows only)
#
# Alacritty defaults to using the newer ConPTY backend if it is available,
# since it resolves a lot of bugs and is quite a bit faster. If it is not
# available, the WinPTY backend will be used instead.
#
# Setting this option to `true` makes Alacritty use the legacy WinPTY backend,
# even if the ConPTY backend is available.
#winpty_backend: false

# Send ESC (\x1b) before characters when alt is pressed.
#alt_send_esc: true

mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  #double_click: { threshold: 300 }
  #triple_click: { threshold: 300 }

  # If this is `true`, the cursor is temporarily hidden when typing.
  #hide_when_typing: false

  url:
    # URL launcher
    #
    # This program is executed when clicking on a text which is recognized as a URL.
    # The URL is always added to the command as the last parameter.
    #
    # When set to `launcher: None`, URL launching will be disabled completely.
    #
    # Default:
    #   - (macOS) open
    #   - (Linux/BSD) xdg-open
    #   - (Windows) explorer
    #launcher:
    #  program: xdg-open
    #  args: []

    # URL modifiers
    #
    # These are the modifiers that need to be held down for opening URLs when clicking
    # on them. The available modifiers are documented in the key binding section.
    modifiers: Control

# Mouse bindings
#
# Mouse bindings are specified as a list of objects, much like the key
# bindings further below.
#
# To trigger mouse bindings when an application running within Alacritty captures the mouse, the
# `Shift` modifier is automatically added as a requirement.
#
# Each mouse binding will specify a:
#
# - `mouse`:
#
#   - Middle
#   - Left
#   - Right
#   - Numeric identifier such as `5`
#
# - `action` (see key bindings)
#
# And optionally:
#
# - `mods` (see key bindings)
#mouse_bindings:
#  - { mouse: Middle, action: PasteSelection }

# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
#   - ToggleViMode
#   - SearchForward
#   - SearchBackward
#   - Copy
#   - Paste
#   - PasteSelection
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollHalfPageUp
#   - ScrollHalfPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Minimize
#   - Quit
#   - ToggleFullscreen
#   - SpawnNewInstance
#   - ClearLogNotice
#   - ClearSelection
#   - ReceiveChar
#   - None
#
#   (`mode: Vi` only):
#   - Open
#   - Up
#   - Down
#   - Left
#   - Right
#   - First
#   - Last
#   - FirstOccupied
#   - High
#   - Middle
#   - Low
#   - SemanticLeft
#   - SemanticRight
#   - SemanticLeftEnd
#   - SemanticRightEnd
#   - WordRight
#   - WordLeft
#   - WordRightEnd
#   - WordLeftEnd
#   - Bracket
#   - ToggleNormalSelection
#   - ToggleLineSelection
#   - ToggleBlockSelection
#   - ToggleSemanticSelection
#   - SearchNext
#   - SearchPrevious
#   - SearchStart
#   - SearchEnd
#
#   (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
#   (Linux/BSD only):
#   - CopySelection: Copies into selection buffer
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Alt
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
#
# If the same trigger is assigned to multiple actions, all of them are executed
# in the order they were defined in.
#key_bindings:
#  - { key: V,        mods: Control|Shift,     action: Paste                     }
#  - { key: C,        mods: Control|Shift,     action: Copy                      }
#  # - { key: Q,        mods: Command, action: Quit                              }
#  # - { key: W,        mods: Command, action: Quit                              }
#  - { key: Insert,   mods: Shift,             action: PasteSelection            }
#  - { key: Key0,     mods: Control,           action: ResetFontSize             }
#  - { key: Equals,   mods: Control,           action: IncreaseFontSize          }
#  - { key: Subtract, mods: Control,           action: DecreaseFontSize          }
#  - { key: Home,                              chars: "\x1bOH", mode: AppCursor  }
#  - { key: Home,                              chars: "\x1b[H", mode: ~AppCursor }
#  - { key: Home,     mods: Control,           chars: "\x1b[80;5u"               }
#  - { key: Home,     mods: Control|Shift,     chars: "\x1b[80;6u"               }
#  - { key: Home,     mods: Alt,               chars: "\x1b[80;3u"               }
#  - { key: Home,     mods: Alt|Control,       chars: "\x1b[80;7u"               }
#  - { key: Home,     mods: Alt|Control|Shift, chars: "\x1b[80;8u"               }
#  - { key: Home,     mods: Alt|Shift,         chars: "\x1b[80;4u"               }
#  - { key: Home,     mods: Shift,             chars: "\x1b[80;2u"               }
#  - { key: End,                               chars: "\x1bOF", mode: AppCursor  }
#  - { key: End,                               chars: "\x1b[F", mode: ~AppCursor }
#  - { key: End,      mods: Control,           chars: "\x1b[87;5u"               }
#  - { key: End,      mods: Control|Shift,     chars: "\x1b[87;6u"               }
#  - { key: End,      mods: Alt,               chars: "\x1b[87;3u"               }
#  - { key: End,      mods: Alt|Control,       chars: "\x1b[87;7u"               }
#  - { key: End,      mods: Alt|Control|Shift, chars: "\x1b[87;8u"               }
#  - { key: End,      mods: Alt|Shift,         chars: "\x1b[87;4u"               }
#  - { key: End,      mods: Shift,             chars: "\x1b[87;2u"               }
#  - { key: PageUp,   mods: Shift,             chars: "\x1b[5;2~"                }
#  - { key: PageUp,   mods: Control,           chars: "\x1b[5;5~"                }
#  - { key: PageUp,                            chars: "\x1b[5~"                  }
#  - { key: PageUp,   mods: Control|Shift,     chars: "\x1b[85;6u"               }
#  - { key: PageUp,   mods: Alt,               chars: "\x1b[85;3u"               }
#  - { key: PageUp,   mods: Alt|Control,       chars: "\x1b[85;7u"               }
#  - { key: PageUp,   mods: Alt|Control|Shift, chars: "\x1b[85;8u"               }
#  - { key: PageUp,   mods: Alt|Shift,         chars: "\x1b[85;4u"               }
#  - { key: PageDown, mods: Shift,             chars: "\x1b[6;2~"                }
#  - { key: PageDown, mods: Control,           chars: "\x1b[6;5~"                }
#  - { key: PageDown,                          chars: "\x1b[6~"                  }
#  - { key: PageUp,   mods: Control|Shift,     chars: "\x1b[86;6u"               }
#  - { key: PageUp,   mods: Alt,               chars: "\x1b[86;3u"               }
#  - { key: PageUp,   mods: Alt|Control,       chars: "\x1b[86;7u"               }
#  - { key: PageUp,   mods: Alt|Control|Shift, chars: "\x1b[86;8u"               }
#  - { key: PageUp,   mods: Alt|Shift,         chars: "\x1b[86;4u"               }
#  - { key: Left,     mods: Shift,             chars: "\x1b[1;2D"                }
#  - { key: Left,     mods: Control,           chars: "\x1b[1;5D"                }
#  - { key: Left,     mods: Alt,               chars: "\x1b[1;3D"                }
#  - { key: Left,                              chars: "\x1b[D", mode: ~AppCursor }
#  - { key: Left,                              chars: "\x1bOD", mode: AppCursor  }
#  - { key: Right,    mods: Shift,             chars: "\x1b[1;2C"                }
#  - { key: Right,    mods: Control,           chars: "\x1b[1;5C"                }
#  - { key: Right,    mods: Alt,               chars: "\x1b[1;3C"                }
#  - { key: Right,                             chars: "\x1b[C", mode: ~AppCursor }
#  - { key: Right,                             chars: "\x1bOC", mode: AppCursor  }
#  - { key: Up,       mods: Shift,             chars: "\x1b[1;2A"                }
#  - { key: Up,       mods: Control,           chars: "\x1b[1;5A"                }
#  - { key: Up,       mods: Alt,               chars: "\x1b[1;3A"                }
#  - { key: Up,                                chars: "\x1b[A", mode: ~AppCursor }
#  - { key: Up,                                chars: "\x1bOA", mode: AppCursor  }
#  - { key: Down,     mods: Shift,             chars: "\x1b[1;2B"                }
#  - { key: Down,     mods: Control,           chars: "\x1b[1;5B"                }
#  - { key: Down,     mods: Alt,               chars: "\x1b[1;3B"                }
#  - { key: Down,                              chars: "\x1b[B", mode: ~AppCursor }
#  - { key: Down,                              chars: "\x1bOB", mode: AppCursor  }
#  # - { key: Space,    mods: Control,           chars: "\x1b[32;5u"             }
#  - { key: Space,    mods: Control|Shift,     chars: "\x1b[32;6u"               }
#  - { key: Space,    mods: Alt,               chars: "\x1b[32;3u"               }
#  - { key: Space,    mods: Alt|Control,       chars: "\x1b[32;7u"               }
#  - { key: Space,    mods: Alt|Control|Shift, chars: "\x1b[32;8u"               }
#  - { key: Space,    mods: Alt|Shift,         chars: "\x1b[32;4u"               }
#  - { key: Space,    mods: Shift,             chars: "\x1b[32;2u"               }
#  - { key: Tab,      mods: Shift,             chars: "\x1b[Z"                   }
#  - { key: Tab,      mods: Control,           chars: "\x1b[9;5u"                }
#  - { key: Tab,      mods: Control|Shift,     chars: "\x1b[1;6Z"                }
#  - { key: Tab,      mods: Alt,               chars: "\x1b[1;3Z"                }
#  - { key: Tab,      mods: Alt|Control,       chars: "\x1b[1;7Z"                }
#  - { key: Tab,      mods: Alt|Control|Shift, chars: "\x1b[1;8Z"                }
#  - { key: Tab,      mods: Alt|Shift,         chars: "\x1b[1;4Z"                }
#  - { key: Tab,      mods: Shift,             chars: "\x1b[1;2Z"                }
#  - { key: Return,   mods: Control,           chars: "\x1b[13;5u"               }
#  - { key: Return,   mods: Control|Shift,     chars: "\x1b[13;6u"               }
#  - { key: Return,   mods: Alt,               chars: "\x1b[13;3u"               }
#  - { key: Return,   mods: Alt|Control,       chars: "\x1b[13;7u"               }
#  - { key: Return,   mods: Alt|Control|Shift, chars: "\x1b[13;8u"               }
#  - { key: Return,   mods: Alt|Shift,         chars: "\x1b[13;4u"               }
#  - { key: Return,   mods: Shift,             chars: "\x1b[13;2u"               }
#  - { key: Pause,    mods: Control,           chars: "\x1b[18;5u"               }
#  - { key: Pause,    mods: Control|Shift,     chars: "\x1b[18;6u"               }
#  - { key: Pause,    mods: Alt,               chars: "\x1b[18;3u"               }
#  - { key: Pause,    mods: Alt|Control,       chars: "\x1b[18;7u"               }
#  - { key: Pause,    mods: Alt|Control|Shift, chars: "\x1b[18;8u"               }
#  - { key: Pause,    mods: Alt|Shift,         chars: "\x1b[18;4u"               }
#  - { key: Pause,    mods: Shift,             chars: "\x1b[18;2u"               }
#  - { key: Scroll,   mods: Control,           chars: "\x1b[20;5u"               }
#  - { key: Scroll,   mods: Control|Shift,     chars: "\x1b[20;6u"               }
#  - { key: Scroll,   mods: Alt,               chars: "\x1b[20;3u"               }
#  - { key: Scroll,   mods: Alt|Control,       chars: "\x1b[20;7u"               }
#  - { key: Scroll,   mods: Alt|Control|Shift, chars: "\x1b[20;8u"               }
#  - { key: Scroll,   mods: Alt|Shift,         chars: "\x1b[20;4u"               }
#  - { key: Scroll,   mods: Shift,             chars: "\x1b[20;2u"               }
#  - { key: Escape,   mods: Control,           chars: "\x1b[27;5u"               }
#  - { key: Escape,   mods: Control|Shift,     chars: "\x1b[27;6u"               }
#  - { key: Escape,   mods: Alt,               chars: "\x1b[27;3u"               }
#  - { key: Escape,   mods: Alt|Control,       chars: "\x1b[27;7u"               }
#  - { key: Escape,   mods: Alt|Control|Shift, chars: "\x1b[27;8u"               }
#  - { key: Escape,   mods: Alt|Shift,         chars: "\x1b[27;4u"               }
#  - { key: Escape,   mods: Shift,             chars: "\x1b[27;2u"               }
#  - { key: F1,                                chars: "\x1bOP"                   }
#  - { key: F2,                                chars: "\x1bOQ"                   }
#  - { key: F3,                                chars: "\x1bOR"                   }
#  - { key: F4,                                chars: "\x1bOS"                   }
#  - { key: F5,                                chars: "\x1b[15~"                 }
#  - { key: F6,                                chars: "\x1b[17~"                 }
#  - { key: F7,                                chars: "\x1b[18~"                 }
#  - { key: F8,                                chars: "\x1b[19~"                 }
#  - { key: F9,                                chars: "\x1b[20~"                 }
#  - { key: F10,                               chars: "\x1b[21~"                 }
#  - { key: F11,                               chars: "\x1b[23~"                 }
#  - { key: F12,                               chars: "\x1b[24~"                 }
#  - { key: Back,                              chars: "\x7f"                     }
#  - { key: Back,     mods: Alt,               chars: "\x1b\x7f"                 }
#  - { key: Back,     mods: Control,           chars: "\x1b[127;5u"              }
#  - { key: Back,     mods: Control|Shift,     chars: "\x1b[127;6u"              }
#  - { key: Back,     mods: Alt|Control,       chars: "\x1b[127;7u"              }
#  - { key: Back,     mods: Alt|Control|Shift, chars: "\x1b[127;8u"              }
#  - { key: Back,     mods: Alt|Shift,         chars: "\x1b[127;4u"              }
#  - { key: Back,     mods: Shift,             chars: "\x1b[127;2u"              }
#  - { key: Insert,                            chars: "\x1b[2~"                  }
#  - { key: Insert,   mods: Control,           chars: "\x1b[99;5u"               }
#  - { key: Insert,   mods: Control|Shift,     chars: "\x1b[99;6u"               }
#  - { key: Insert,   mods: Alt,               chars: "\x1b[99;3u"               }
#  - { key: Insert,   mods: Alt|Control,       chars: "\x1b[99;7u"               }
#  - { key: Insert,   mods: Alt|Control|Shift, chars: "\x1b[99;8u"               }
#  - { key: Insert,   mods: Alt|Shift,         chars: "\x1b[99;4u"               }
#  # - { key: Insert,     mods: Shift,             chars: "\x1b[99;2u"           }
#  - { key: Delete,                            chars: "\x1b[3~"                  }
#  - { key: Delete,   mods: Control,           chars: "\x1b[255;5u"              }
#  - { key: Delete,   mods: Control|Shift,     chars: "\x1b[255;6u"              }
#  - { key: Delete,   mods: Alt,               chars: "\x1b[255;3u"              }
#  - { key: Delete,   mods: Alt|Control,       chars: "\x1b[255;7u"              }
#  - { key: Delete,   mods: Alt|Control|Shift, chars: "\x1b[255;8u"              }
#  - { key: Delete,   mods: Alt|Shift,         chars: "\x1b[255;4u"              }
#  - { key: Delete,   mods: Shift,             chars: "\x1b[255;2u"              }
#  - { key: A,        mods: Control|Shift,     chars: "\x1b[65;6u"               }
#  - { key: A,        mods: Alt|Control,       chars: "\x1b[65;7u"               }
#  - { key: A,        mods: Alt|Control|Shift, chars: "\x1b[65;8u"               }
#  - { key: A,        mods: Alt|Shift,         chars: "\x1b[65;4u"               }
#  - { key: B,        mods: Control|Shift,     chars: "\x1b[66;6u"               }
#  - { key: B,        mods: Alt|Control,       chars: "\x1b[66;7u"               }
#  - { key: B,        mods: Alt|Control|Shift, chars: "\x1b[66;8u"               }
#  - { key: B,        mods: Alt|Shift,         chars: "\x1b[66;4u"               }
#  # - { key: C,     mods: Control|Shift,     chars: "\x1b[67;6u"                }
#  - { key: C,        mods: Alt|Control,       chars: "\x1b[67;7u"               }
#  - { key: C,        mods: Alt|Control|Shift, chars: "\x1b[67;8u"               }
#  - { key: C,        mods: Alt|Shift,         chars: "\x1b[67;4u"               }
#  - { key: D,        mods: Control|Shift,     chars: "\x1b[68;6u"               }
#  - { key: D,        mods: Alt|Control,       chars: "\x1b[68;7u"               }
#  - { key: D,        mods: Alt|Control|Shift, chars: "\x1b[68;8u"               }
#  - { key: D,        mods: Alt|Shift,         chars: "\x1b[68;4u"               }
#  - { key: E,        mods: Control|Shift,     chars: "\x1b[69;6u"               }
#  - { key: E,        mods: Alt|Control,       chars: "\x1b[69;7u"               }
#  - { key: E,        mods: Alt|Control|Shift, chars: "\x1b[69;8u"               }
#  - { key: E,        mods: Alt|Shift,         chars: "\x1b[69;4u"               }
#  - { key: F,        mods: Control|Shift,     chars: "\x1b[70;6u"               }
#  - { key: F,        mods: Alt|Control,       chars: "\x1b[70;7u"               }
#  - { key: F,        mods: Alt|Control|Shift, chars: "\x1b[70;8u"               }
#  - { key: F,        mods: Alt|Shift,         chars: "\x1b[70;4u"               }
#  - { key: G,        mods: Control|Shift,     chars: "\x1b[71;6u"               }
#  - { key: G,        mods: Alt|Control,       chars: "\x1b[71;7u"               }
#  - { key: G,        mods: Alt|Control|Shift, chars: "\x1b[71;8u"               }
#  - { key: G,        mods: Alt|Shift,         chars: "\x1b[71;4u"               }
#  - { key: H,        mods: Control|Shift,     chars: "\x1b[72;6u"               }
#  - { key: H,        mods: Alt|Control,       chars: "\x1b[72;7u"               }
#  - { key: H,        mods: Alt|Control|Shift, chars: "\x1b[72;8u"               }
#  - { key: H,        mods: Alt|Shift,         chars: "\x1b[72;4u"               }
#  - { key: I,        mods: Control,           chars: "\x1b[73;5u"               }
#  - { key: I,        mods: Control|Shift,     chars: "\x1b[73;6u"               }
#  - { key: I,        mods: Alt|Control,       chars: "\x1b[73;7u"               }
#  - { key: I,        mods: Alt|Control|Shift, chars: "\x1b[73;8u"               }
#  - { key: I,        mods: Alt|Shift,         chars: "\x1b[73;4u"               }
#  - { key: J,        mods: Control|Shift,     chars: "\x1b[74;6u"               }
#  - { key: J,        mods: Alt|Control,       chars: "\x1b[74;7u"               }
#  - { key: J,        mods: Alt|Control|Shift, chars: "\x1b[74;8u"               }
#  - { key: J,        mods: Alt|Shift,         chars: "\x1b[74;4u"               }
#  # - { key: K,     mods: Alt,               chars: "\x1b[75;3u"                }
#  - { key: K,        mods: Control|Shift,     chars: "\x1b[75;6u"               }
#  - { key: K,        mods: Alt|Control,       chars: "\x1b[75;7u"               }
#  - { key: K,        mods: Alt|Control|Shift, chars: "\x1b[75;8u"               }
#  - { key: K,        mods: Alt|Shift,         chars: "\x1b[75;4u"               }
#  - { key: L,        mods: Control|Shift,     chars: "\x1b[76;6u"               }
#  - { key: L,        mods: Alt|Control,       chars: "\x1b[76;7u"               }
#  - { key: L,        mods: Alt|Control|Shift, chars: "\x1b[76;8u"               }
#  - { key: L,        mods: Alt|Shift,         chars: "\x1b[76;4u"               }
#  - { key: M,        mods: Control,           chars: "\x1b[77;5u"               }
#  - { key: M,        mods: Control|Shift,     chars: "\x1b[77;6u"               }
#  - { key: M,        mods: Alt|Control,       chars: "\x1b[77;7u"               }
#  - { key: M,        mods: Alt|Control|Shift, chars: "\x1b[77;8u"               }
#  - { key: M,        mods: Alt|Shift,         chars: "\x1b[77;4u"               }
#  - { key: N,        mods: Control|Shift,     chars: "\x1b[78;6u"               }
#  - { key: N,        mods: Alt|Control,       chars: "\x1b[78;7u"               }
#  - { key: N,        mods: Alt|Control|Shift, chars: "\x1b[78;8u"               }
#  - { key: N,        mods: Alt|Shift,         chars: "\x1b[78;4u"               }
#  # - { key: O,     mods: Alt,               chars: "\x1b[79;3u"                }
#  - { key: O,        mods: Control|Shift,     chars: "\x1b[79;6u"               }
#  - { key: O,        mods: Alt|Control,       chars: "\x1b[79;7u"               }
#  - { key: O,        mods: Alt|Control|Shift, chars: "\x1b[79;8u"               }
#  - { key: O,        mods: Alt|Shift,         chars: "\x1b[79;4u"               }
#  - { key: P,        mods: Control|Shift,     chars: "\x1b[80;6u"               }
#  - { key: P,        mods: Alt|Control,       chars: "\x1b[80;7u"               }
#  - { key: P,        mods: Alt|Control|Shift, chars: "\x1b[80;8u"               }
#  - { key: P,        mods: Alt|Shift,         chars: "\x1b[80;4u"               }
#  - { key: Q,        mods: Control|Shift,     chars: "\x1b[81;6u"               }
#  - { key: Q,        mods: Alt|Control,       chars: "\x1b[81;7u"               }
#  - { key: Q,        mods: Alt|Control|Shift, chars: "\x1b[81;8u"               }
#  - { key: Q,        mods: Alt|Shift,         chars: "\x1b[81;4u"               }
#  - { key: R,        mods: Control|Shift,     chars: "\x1b[82;6u"               }
#  - { key: R,        mods: Alt|Control,       chars: "\x1b[82;7u"               }
#  - { key: R,        mods: Alt|Control|Shift, chars: "\x1b[82;8u"               }
#  - { key: R,        mods: Alt|Shift,         chars: "\x1b[82;4u"               }
#  - { key: S,        mods: Control|Shift,     chars: "\x1b[83;6u"               }
#  - { key: S,        mods: Alt|Control,       chars: "\x1b[83;7u"               }
#  - { key: S,        mods: Alt|Control|Shift, chars: "\x1b[83;8u"               }
#  - { key: S,        mods: Alt|Shift,         chars: "\x1b[83;4u"               }
#  - { key: T,        mods: Control|Shift,     chars: "\x1b[84;6u"               }
#  - { key: T,        mods: Alt|Control,       chars: "\x1b[84;7u"               }
#  - { key: T,        mods: Alt|Control|Shift, chars: "\x1b[84;8u"               }
#  - { key: T,        mods: Alt|Shift,         chars: "\x1b[84;4u"               }
#  - { key: U,        mods: Control|Shift,     chars: "\x1b[85;6u"               }
#  - { key: U,        mods: Alt|Control,       chars: "\x1b[85;7u"               }
#  - { key: U,        mods: Alt|Control|Shift, chars: "\x1b[85;8u"               }
#  - { key: U,        mods: Alt|Shift,         chars: "\x1b[85;4u"               }
#  # - { key: V,     mods: Control|Shift,     chars: "\x1b[86;6u"                }
#  - { key: V,        mods: Alt|Control,       chars: "\x1b[86;7u"               }
#  - { key: V,        mods: Alt|Control|Shift, chars: "\x1b[86;8u"               }
#  - { key: V,        mods: Alt|Shift,         chars: "\x1b[86;4u"               }
#  - { key: W,        mods: Control|Shift,     chars: "\x1b[87;6u"               }
#  - { key: W,        mods: Alt|Control,       chars: "\x1b[87;7u"               }
#  - { key: W,        mods: Alt|Control|Shift, chars: "\x1b[87;8u"               }
#  - { key: W,        mods: Alt|Shift,         chars: "\x1b[87;4u"               }
#  - { key: X,        mods: Control|Shift,     chars: "\x1b[88;6u"               }
#  - { key: X,        mods: Alt|Control,       chars: "\x1b[88;7u"               }
#  - { key: X,        mods: Alt|Control|Shift, chars: "\x1b[88;8u"               }
#  - { key: X,        mods: Alt|Shift,         chars: "\x1b[88;4u"               }
#  - { key: Y,        mods: Control|Shift,     chars: "\x1b[89;6u"               }
#  - { key: Y,        mods: Alt|Control,       chars: "\x1b[89;7u"               }
#  - { key: Y,        mods: Alt|Control|Shift, chars: "\x1b[89;8u"               }
#  - { key: Y,        mods: Alt|Shift,         chars: "\x1b[89;4u"               }
#  - { key: Z,        mods: Control|Shift,     chars: "\x1b[90;6u"               }
#  - { key: Z,        mods: Alt|Control,       chars: "\x1b[90;7u"               }
#  - { key: Z,        mods: Alt|Control|Shift, chars: "\x1b[90;8u"               }
#  - { key: Z,        mods: Alt|Shift,         chars: "\x1b[90;4u"               }
#  # - { key: Key0,     mods: Control,           chars: "\x1b[48;5u"               }
#  - { key: Key0,     mods: Control|Shift,     chars: "\x1b[48;6u"               }
#  - { key: Key0,     mods: Alt,               chars: "\x1b[48;3u"               }
#  - { key: Key0,     mods: Alt|Control,       chars: "\x1b[48;7u"               }
#  - { key: Key0,     mods: Alt|Control|Shift, chars: "\x1b[48;8u"               }
#  - { key: Key0,     mods: Alt|Shift,         chars: "\x1b[48;4u"               }
#  # - { key: Key1,     mods: Control,           chars: "\x1b[49;5u"               }
#  - { key: Key1,     mods: Control|Shift,     chars: "\x1b[49;6u"               }
#  - { key: Key1,     mods: Alt,               chars: "\x1b[49;3u"               }
#  - { key: Key1,     mods: Alt|Control,       chars: "\x1b[49;7u"               }
#  - { key: Key1,     mods: Alt|Control|Shift, chars: "\x1b[49;8u"               }
#  - { key: Key1,     mods: Alt|Shift,         chars: "\x1b[49;4u"               }
#  # - { key: Key2,     mods: Control,           chars: "\x1b[50;5u"               }
#  - { key: Key2,     mods: Control|Shift,     chars: "\x1b[50;6u"               }
#  - { key: Key2,     mods: Alt,               chars: "\x1b[50;3u"               }
#  - { key: Key2,     mods: Alt|Control,       chars: "\x1b[50;7u"               }
#  - { key: Key2,     mods: Alt|Control|Shift, chars: "\x1b[50;8u"               }
#  - { key: Key2,     mods: Alt|Shift,         chars: "\x1b[50;4u"               }
#  # - { key: Key3,     mods: Control,           chars: "\x1b[51;5u"               }
#  - { key: Key3,     mods: Control|Shift,     chars: "\x1b[51;6u"               }
#  - { key: Key3,     mods: Alt,               chars: "\x1b[51;3u"               }
#  - { key: Key3,     mods: Alt|Control,       chars: "\x1b[51;7u"               }
#  - { key: Key3,     mods: Alt|Control|Shift, chars: "\x1b[51;8u"               }
#  - { key: Key3,     mods: Alt|Shift,         chars: "\x1b[51;4u"               }
#  # - { key: Key4,     mods: Control,           chars: "\x1b[52;5u"               }
#  - { key: Key4,     mods: Control|Shift,     chars: "\x1b[52;6u"               }
#  - { key: Key4,     mods: Alt,               chars: "\x1b[52;3u"               }
#  - { key: Key4,     mods: Alt|Control,       chars: "\x1b[52;7u"               }
#  - { key: Key4,     mods: Alt|Control|Shift, chars: "\x1b[52;8u"               }
#  - { key: Key4,     mods: Alt|Shift,         chars: "\x1b[52;4u"               }
#  # - { key: Key5,     mods: Control,           chars: "\x1b[53;5u"               }
#  - { key: Key5,     mods: Control|Shift,     chars: "\x1b[53;6u"               }
#  - { key: Key5,     mods: Alt,               chars: "\x1b[53;3u"               }
#  - { key: Key5,     mods: Alt|Control,       chars: "\x1b[53;7u"               }
#  - { key: Key5,     mods: Alt|Control|Shift, chars: "\x1b[53;8u"               }
#  - { key: Key5,     mods: Alt|Shift,         chars: "\x1b[53;4u"               }
#  # - { key: Key6,     mods: Control,           chars: "\x1b[54;5u"               }
#  - { key: Key6,     mods: Control|Shift,     chars: "\x1b[54;6u"               }
#  - { key: Key6,     mods: Alt,               chars: "\x1b[54;3u"               }
#  - { key: Key6,     mods: Alt|Control,       chars: "\x1b[54;7u"               }
#  - { key: Key6,     mods: Alt|Control|Shift, chars: "\x1b[54;8u"               }
#  - { key: Key6,     mods: Alt|Shift,         chars: "\x1b[54;4u"               }
#  # - { key: Key7,     mods: Control,           chars: "\x1b[55;5u"               }
#  - { key: Key7,     mods: Control|Shift,     chars: "\x1b[55;6u"               }
#  - { key: Key7,     mods: Alt,               chars: "\x1b[55;3u"               }
#  - { key: Key7,     mods: Alt|Control,       chars: "\x1b[55;7u"               }
#  - { key: Key7,     mods: Alt|Control|Shift, chars: "\x1b[55;8u"               }
#  - { key: Key7,     mods: Alt|Shift,         chars: "\x1b[55;4u"               }
#  # - { key: Key8,     mods: Control,           chars: "\x1b[56;5u"               }
#  - { key: Key8,     mods: Control|Shift,     chars: "\x1b[56;6u"               }
#  - { key: Key8,     mods: Alt,               chars: "\x1b[56;3u"               }
#  - { key: Key8,     mods: Alt|Control,       chars: "\x1b[56;7u"               }
#  - { key: Key8,     mods: Alt|Control|Shift, chars: "\x1b[56;8u"               }
#  - { key: Key8,     mods: Alt|Shift,         chars: "\x1b[56;4u"               }
#  # - { key: Key9,     mods: Control,           chars: "\x1b[57;5u"               }
#  - { key: Key9,     mods: Control|Shift,     chars: "\x1b[57;6u"               }
#  - { key: Key9,     mods: Alt,               chars: "\x1b[57;3u"               }
#  - { key: Key9,     mods: Alt|Control,       chars: "\x1b[57;7u"               }
#  - { key: Key9,     mods: Alt|Control|Shift, chars: "\x1b[57;8u"               }
#  - { key: Key9,     mods: Alt|Shift,         chars: "\x1b[57;4u"               }
#  - { key: Colon,    mods: Control,           chars: "\x1b[58;5u"               }
#  - { key: Colon,    mods: Control|Shift,     chars: "\x1b[58;6u"               }
#  - { key: Colon,    mods: Alt,               chars: "\x1b[58;3u"               }
#  - { key: Colon,    mods: Alt|Control,       chars: "\x1b[58;7u"               }
#  - { key: Colon,    mods: Alt|Control|Shift, chars: "\x1b[58;8u"               }
#  - { key: Colon,    mods: Alt|Shift,         chars: "\x1b[58;4u"               }
#    #- { key: Colon,    mods: Shift,             chars: "\x1b[58;2u"               }
#  - { key: Comma,    mods: Control,           chars: "\x1b[44;5u"               }
#  # - { key: Comma,     mods: Control|Shift,     chars: "\x1b[44;6u"            }
#  - { key: Comma,    mods: Alt,               chars: "\x1b[44;3u"               }
#  - { key: Comma,    mods: Alt|Control,       chars: "\x1b[44;7u"               }
#  # - { key: Comma,     mods: Alt|Control|Shift, chars: "\x1b[44;8u"            }
#  # - { key: Comma,     mods: Alt|Shift,         chars: "\x1b[44;4u"            }
#  # - { key: Comma,     mods: Shift,             chars: "\x1b[44;2u"            }
#  - { key: Period,   mods: Control,           chars: "\x1b[46;5u"               }
#  # - { key: Period,     mods: Control|Shift,     chars: "\x1b[46;6u"           }
#  # - { key: Period,   mods: Alt,               chars: "\x1b[46;3u"               }
#  - { key: Period,   mods: Alt|Control,       chars: "\x1b[46;7u"               }
#  # - { key: Period,     mods: Alt|Control|Shift, chars: "\x1b[46;8u"           }
#  # - { key: Period,     mods: Alt|Shift,         chars: "\x1b[46;4u"           }
#  # - { key: Period,     mods: Shift,             chars: "\x1b[46;2u"           }

key_bindings:
  # (Windows/Linux only)
  #- { key: V,        mods: Control|Shift, action: Paste            }
  #- { key: C,        mods: Control|Shift, action: Copy             }
  #- { key: Insert,   mods: Shift,         action: PasteSelection   }
  #- { key: Key0,     mods: Control,       action: ResetFontSize    }
  #- { key: Equals,   mods: Control,       action: IncreaseFontSize }
  #- { key: Add,      mods: Control,       action: IncreaseFontSize }
  #- { key: Subtract, mods: Control,       action: DecreaseFontSize }
  #- { key: Minus,    mods: Control,       action: DecreaseFontSize }

  # (Windows only)
  #- { key: Return,   mods: Alt,           action: ToggleFullscreen }

  # (macOS only)
  #- { key: K,      mods: Command, mode: ~Vi, chars: "\x0c"            }
  #- { key: Key0,   mods: Command,            action: ResetFontSize    }
  #- { key: Equals, mods: Command,            action: IncreaseFontSize }
  #- { key: Add,    mods: Command,            action: IncreaseFontSize }
  #- { key: Minus,  mods: Command,            action: DecreaseFontSize }
  #- { key: K,      mods: Command,            action: ClearHistory     }
  #- { key: V,      mods: Command,            action: Paste            }
  #- { key: C,      mods: Command,            action: Copy             }
  #- { key: C,      mods: Command, mode: Vi,  action: ClearSelection   }
  #- { key: H,      mods: Command,            action: Hide             }
  #- { key: M,      mods: Command,            action: Minimize         }
  #- { key: Q,      mods: Command,            action: Quit             }
  #- { key: W,      mods: Command,            action: Quit             }
  #- { key: N,      mods: Command,            action: SpawnNewInstance }
  #- { key: F,      mods: Command|Control,    action: ToggleFullscreen }
  #- { key: F,      mods: Command,            action: SearchForward    }
  #- { key: B,      mods: Command,            action: SearchBackward   }

  - { key: Paste,                   action: Paste                            }
  - { key: Copy,                    action: Copy                             }
  # - { key: L,        mods: Control, action: ClearLogNotice                   }
  # - { key: L,        mods: Control, chars: "\x0c"                            }
  - { key: Home,     mods: Alt,     chars: "\x1b[1;3H"                       }
  - { key: Home,                    chars: "\x1bOH",        mode: AppCursor  }
  - { key: Home,                    chars: "\x1b[H",        mode: ~AppCursor }
  - { key: End,      mods: Alt,     chars: "\x1b[1;3F"                       }
  - { key: End,                     chars: "\x1bOF",        mode: AppCursor  }
  - { key: End,                     chars: "\x1b[F",        mode: ~AppCursor }
  - { key: PageUp,   mods: Shift,   action: ScrollPageUp,   mode: ~Alt       }
  - { key: PageUp,   mods: Shift,   chars: "\x1b[5;2~",     mode: Alt        }
  - { key: PageUp,   mods: Control, chars: "\x1b[5;5~"                       }
  - { key: PageUp,   mods: Alt,     chars: "\x1b[5;3~"                       }
  - { key: PageUp,                  chars: "\x1b[5~"                         }
  - { key: PageDown, mods: Shift,   action: ScrollPageDown, mode: ~Alt       }
  - { key: PageDown, mods: Shift,   chars: "\x1b[6;2~",     mode: Alt        }
  - { key: PageDown, mods: Control, chars: "\x1b[6;5~"                       }
  - { key: PageDown, mods: Alt,     chars: "\x1b[6;3~"                       }
  - { key: PageDown,                chars: "\x1b[6~"                         }
  - { key: Tab,      mods: Shift,   chars: "\x1b[Z"                          }
  - { key: Back,                    chars: "\x7f"                            }
  - { key: Back,     mods: Alt,     chars: "\x1b\x7f"                        }
  - { key: Insert,                  chars: "\x1b[2~"                         }
  - { key: Delete,                  chars: "\x1b[3~"                         }
  - { key: Left,     mods: Shift,   chars: "\x1b[1;2D"                       }
  - { key: Left,     mods: Control, chars: "\x1b[1;5D"                       }
  - { key: Left,     mods: Alt,     chars: "\x1b[1;3D"                       }
  - { key: Left,                    chars: "\x1b[D",        mode: ~AppCursor }
  - { key: Left,                    chars: "\x1bOD",        mode: AppCursor  }
  - { key: Right,    mods: Shift,   chars: "\x1b[1;2C"                       }
  - { key: Right,    mods: Control, chars: "\x1b[1;5C"                       }
  - { key: Right,    mods: Alt,     chars: "\x1b[1;3C"                       }
  - { key: Right,                   chars: "\x1b[C",        mode: ~AppCursor }
  - { key: Right,                   chars: "\x1bOC",        mode: AppCursor  }
  - { key: Up,       mods: Shift,   chars: "\x1b[1;2A"                       }
  - { key: Up,       mods: Control, chars: "\x1b[1;5A"                       }
  - { key: Up,       mods: Alt,     chars: "\x1b[1;3A"                       }
  - { key: Up,                      chars: "\x1b[A",        mode: ~AppCursor }
  - { key: Up,                      chars: "\x1bOA",        mode: AppCursor  }
  - { key: Down,     mods: Shift,   chars: "\x1b[1;2B"                       }
  - { key: Down,     mods: Control, chars: "\x1b[1;5B"                       }
  - { key: Down,     mods: Alt,     chars: "\x1b[1;3B"                       }
  - { key: Down,                    chars: "\x1b[B",        mode: ~AppCursor }
  - { key: Down,                    chars: "\x1bOB",        mode: AppCursor  }
  - { key: F1,                      chars: "\x1bOP"                          }
  - { key: F2,                      chars: "\x1bOQ"                          }
  - { key: F3,                      chars: "\x1bOR"                          }
  - { key: F4,                      chars: "\x1bOS"                          }
  - { key: F5,                      chars: "\x1b[15~"                        }
  - { key: F6,                      chars: "\x1b[17~"                        }
  - { key: F7,                      chars: "\x1b[18~"                        }
  - { key: F8,                      chars: "\x1b[19~"                        }
  - { key: F9,                      chars: "\x1b[20~"                        }
  - { key: F10,                     chars: "\x1b[21~"                        }
  - { key: F11,                     chars: "\x1b[23~"                        }
  - { key: F12,                     chars: "\x1b[24~"                        }
  - { key: F1,       mods: Shift,   chars: "\x1b[1;2P"                       }
  - { key: F2,       mods: Shift,   chars: "\x1b[1;2Q"                       }
  - { key: F3,       mods: Shift,   chars: "\x1b[1;2R"                       }
  - { key: F4,       mods: Shift,   chars: "\x1b[1;2S"                       }
  - { key: F5,       mods: Shift,   chars: "\x1b[15;2~"                      }
  - { key: F6,       mods: Shift,   chars: "\x1b[17;2~"                      }
  - { key: F7,       mods: Shift,   chars: "\x1b[18;2~"                      }
  - { key: F8,       mods: Shift,   chars: "\x1b[19;2~"                      }
  - { key: F9,       mods: Shift,   chars: "\x1b[20;2~"                      }
  - { key: F10,      mods: Shift,   chars: "\x1b[21;2~"                      }
  - { key: F11,      mods: Shift,   chars: "\x1b[23;2~"                      }
  - { key: F12,      mods: Shift,   chars: "\x1b[24;2~"                      }
  - { key: F1,       mods: Control, chars: "\x1b[1;5P"                       }
  - { key: F2,       mods: Control, chars: "\x1b[1;5Q"                       }
  - { key: F3,       mods: Control, chars: "\x1b[1;5R"                       }
  - { key: F4,       mods: Control, chars: "\x1b[1;5S"                       }
  - { key: F5,       mods: Control, chars: "\x1b[15;5~"                      }
  - { key: F6,       mods: Control, chars: "\x1b[17;5~"                      }
  - { key: F7,       mods: Control, chars: "\x1b[18;5~"                      }
  - { key: F8,       mods: Control, chars: "\x1b[19;5~"                      }
  - { key: F9,       mods: Control, chars: "\x1b[20;5~"                      }
  - { key: F10,      mods: Control, chars: "\x1b[21;5~"                      }
  - { key: F11,      mods: Control, chars: "\x1b[23;5~"                      }
  - { key: F12,      mods: Control, chars: "\x1b[24;5~"                      }
  - { key: F1,       mods: Alt,     chars: "\x1b[1;6P"                       }
  - { key: F2,       mods: Alt,     chars: "\x1b[1;6Q"                       }
  - { key: F3,       mods: Alt,     chars: "\x1b[1;6R"                       }
  - { key: F4,       mods: Alt,     chars: "\x1b[1;6S"                       }
  - { key: F5,       mods: Alt,     chars: "\x1b[15;6~"                      }
  - { key: F6,       mods: Alt,     chars: "\x1b[17;6~"                      }
  - { key: F7,       mods: Alt,     chars: "\x1b[18;6~"                      }
  - { key: F8,       mods: Alt,     chars: "\x1b[19;6~"                      }
  - { key: F9,       mods: Alt,     chars: "\x1b[20;6~"                      }
  - { key: F10,      mods: Alt,     chars: "\x1b[21;6~"                      }
  - { key: F11,      mods: Alt,     chars: "\x1b[23;6~"                      }
  - { key: F12,      mods: Alt,     chars: "\x1b[24;6~"                      }
  - { key: F1,       mods: Super,   chars: "\x1b[1;3P"                       }
  - { key: F2,       mods: Super,   chars: "\x1b[1;3Q"                       }
  - { key: F3,       mods: Super,   chars: "\x1b[1;3R"                       }
  - { key: F4,       mods: Super,   chars: "\x1b[1;3S"                       }
  - { key: F5,       mods: Super,   chars: "\x1b[15;3~"                      }
  - { key: F6,       mods: Super,   chars: "\x1b[17;3~"                      }
  - { key: F7,       mods: Super,   chars: "\x1b[18;3~"                      }
  - { key: F8,       mods: Super,   chars: "\x1b[19;3~"                      }
  - { key: F9,       mods: Super,   chars: "\x1b[20;3~"                      }
  - { key: F10,      mods: Super,   chars: "\x1b[21;3~"                      }
  - { key: F11,      mods: Super,   chars: "\x1b[23;3~"                      }
  - { key: F12,      mods: Super,   chars: "\x1b[24;3~"                      }
  - { key: NumpadEnter,             chars: "\n"                              }

#debug:
  # Display the time it takes to redraw each frame.
  #render_timer: false

  # Keep the log file after quitting Alacritty.
  #persistent_logging: false

  # Log level
  #
  # Values for `log_level`:
  #   - None
  #   - Error
  #   - Warn
  #   - Info
  #   - Debug
  #   - Trace
  #log_level: Warn

  # Print all received window events.
  #print_events: false
